/*dijkstra
 *update:求最短路径的DFS 
 */
#include<cstdio>
#include<vector>
#include<algorithm>
using namespace std;
const int maxn = 510;
const int inf = 99999999;
int n, m, s, t;
int weight[maxn];
int dis[maxn], w[maxn], num[maxn];
int G[maxn][maxn];
bool vis[maxn] = { false };
vector<int> pre[maxn],path,tmp;
int Max=-1;
void DFS(int v){
	if(v==s){
		tmp.push_back(v);
		int sum=0;
		for(int i=tmp.size()-1;i>=0;i--){
			sum+=weight[tmp[i]];
		}
		if(sum>Max){
			Max=sum;path=tmp;
		}
		tmp.pop_back();
		return;
	}
	tmp.push_back(v);
	for(int i=0;i<pre[v].size();i++){
		DFS(pre[v][i]);
	}
	tmp.pop_back();
}
int main() {
	fill(G[0], G[0] + maxn * maxn, inf);
	fill(dis, dis + maxn, inf);

	scanf("%d%d%d%d", &n, &m, &s, &t);
	for (int i = 0; i < n; i++) {
		scanf("%d", &weight[i]);
	}
	for (int i = 0; i < m; i++) {
		int j, k, len;
		scanf("%d %d %d", &j, &k, &len);
		G[j][k] = G[k][j] = len;
	}
	dis[s] = 0;
	w[s] = weight[s];
	num[s] = 1;
	for (int i = 0; i < n; i++) {
		int u = -1, minn = inf;
		for (int j = 0; j < n; j++) {
			if (vis[j] == false && dis[j] < minn) {
				u = j;
				minn = dis[j];
			}
		}
		if (u == -1)
			break;
		vis[u] = true;
		for (int v = 0; v < n; v++) {
			if (vis[v] == false && G[u][v] != inf) {
				if (dis[u] + G[u][v] < dis[v]) {
					num[v] = num[u];
					dis[v] = dis[u] + G[u][v];
					pre[v].clear();
					pre[v].push_back(u);
					w[v] = w[u] + weight[v];
				} else if (dis[u] + G[u][v] == dis[v]) {
					num[v] = num[u] + num[v];
					pre[v].push_back(u);
					if (w[u] + weight[v] > w[v])
						w[v] = w[u] + weight[v];
				}
			}
		}
	}
	printf("%d %d\n", num[t], w[t]);
//与习题无关的分割线------------------------------
	DFS(t);
	for(int i=path.size()-1;i>=0;i--){
		if(i==0) printf("%d",path[i]);
		else printf("%d ",path[i]);
	}


	return 0;
}

