// map+DFS


#include<bits/stdc++.h>
using namespace std;
const int maxn=2010;
int G[maxn][maxn]={0},weight[maxn]={0};
int TotalNumber=0;
bool vis[maxn]={false};
int n,k;
typedef string name;
typedef int id;
map<name,id> NameToId;
map<id,name> IdToName;
map<name,int> Gang; //head's name and the total Num

void DFS(int now,int &head,int &num,int &totalvalue){
	vis[now]=true;
	num++;
	if(weight[now]>weight[head]) head=now;
	for(int i=0;i<TotalNumber;i++){
		if(G[now][i]>0){
			totalvalue+=G[now][i];
			G[now][i]=G[i][now]=0;
			if(vis[i]==false){
				DFS(i,head,num,totalvalue);
			}
		}
	}
}

void DFSTravel(){
	for(int i=0;i<TotalNumber;i++){
		if(vis[i]==false){
			int head=i,num=0,totalvalue=0;
			DFS(i,head,num,totalvalue);
			if(num>2&&totalvalue>k){
				Gang[IdToName[head]]=num;
			}
		}
	}
}

int change(string str){
	if(NameToId.find(str)!=NameToId.end()){
		return NameToId[str];
	}else{
		NameToId[str]=TotalNumber;
		IdToName[TotalNumber]=str;
		return TotalNumber++;
	}
}
int main(void)
{
	string str1,str2;
	int id1,id2,w;
	cin>>n>>k;
	for(int i=0;i<n;i++){
		cin>>str1>>str2>>w;
		id1=change(str1);
		id2=change(str2);
		weight[id1]+=w;
		weight[id2]+=w;
		G[id1][id2]+=w;
		G[id2][id1]+=w;

	}
	DFSTravel();
	cout<<Gang.size()<<endl;
	map<name,int>::iterator it;
	for(it=Gang.begin();it!=Gang.end();it++){
		cout<<it->first<<' '<<it->second<<endl;
	}


	return 0;
}
