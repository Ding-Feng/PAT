//build a tree through postorder and inorder sequence 
//output level order traversal

#include<stdio.h>
#include<stdlib.h>
#include<queue>
using namespace std;
struct TNode{
	int val;
	struct TNode* left;
	struct TNode* right;
};
typedef struct TNode* Tree;
void levelorder(Tree root)
{
	queue<Tree> q;
	int i=0;
	if(root==NULL) return;
	q.push(root);
	while(!q.empty()){
		Tree now=q.front();
		q.pop();
		if(!i){
		printf("%d",now->val);
		i++;
		}else{
		printf(" %d",now->val);
		}if(now->left)
			q.push(now->left);
		if(now->right)
			q.push(now->right);
	}
}
Tree create(int* post,int* in,int size){
	Tree newt=(Tree)malloc(sizeof(struct TNode));
	int i;
	if(size==0) return NULL;
//	printf("%d",size);
	newt->val=post[size-1];
	newt->left=NULL;
	newt->right=NULL;
//	printf("%d",newt->val);
	for(i=0;i<size;i++){
		if(in[i]==newt->val) break;
	}
	newt->left=create(post,in,i);
	newt->right=create(post+i,in+i+1,size-i-1);
	return newt;
}


int main(void)
{
	Tree root;
	int n;
	int post[40],in[40];
	scanf("%d",&n);
	for(int i=0;i<n;i++) scanf("%d",&post[i]);
	for(int i=0;i<n;i++) scanf("%d",&in[i]);
	root=create(post,in,n);
	levelorder(root);
	return 0;
}
